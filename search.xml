<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Thread类的API</title>
      <link href="/2021/11/24/Thread%E7%B1%BB%E7%9A%84API/"/>
      <url>/2021/11/24/Thread%E7%B1%BB%E7%9A%84API/</url>
      
        <content type="html"><![CDATA[<h2 id="不共享数据的情况"><a href="#不共享数据的情况" class="headerlink" title="不共享数据的情况"></a>不共享数据的情况</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多个线程不共享数据的情况, 不会出现非线程安全问题</span></span><br><span class="line"><span class="comment"> * 控制台: 只会出现count值为4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread thread1 = <span class="keyword">new</span> MyThread(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        MyThread thread2 = <span class="keyword">new</span> MyThread(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        MyThread thread3 = <span class="keyword">new</span> MyThread(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        MyThread thread4 = <span class="keyword">new</span> MyThread(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">        MyThread thread5 = <span class="keyword">new</span> MyThread(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">        thread4.start();</span><br><span class="line">        thread5.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       count--;</span><br><span class="line">       System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="共享数据的情况"><a href="#共享数据的情况" class="headerlink" title="共享数据的情况"></a>共享数据的情况</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多个线程共享数据的情况, 会出现非线程安全问题</span></span><br><span class="line"><span class="comment"> * 控制台: 会出现重复的count值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 把这个看做是一个资源, 给下面的线程共享</span></span><br><span class="line">        MyThread resource = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(resource, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(resource, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(resource, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(resource, <span class="string">&quot;D&quot;</span>);</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(resource, <span class="string">&quot;E&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.start();</span><br><span class="line">        t5.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么是非线程安全"><a href="#什么是非线程安全" class="headerlink" title="什么是非线程安全"></a>什么是非线程安全</h2><p>非线程安全问题：指的是多个线程对同一个对象中的同一个实例变量进行操作时会出现值被更改、值不同步的情况，进而影响程序执行流程</p><h2 id="解决数据共享产生非线程安全问题"><a href="#解决数据共享产生非线程安全问题" class="headerlink" title="解决数据共享产生非线程安全问题"></a>解决数据共享产生非线程安全问题</h2><p>也就需要多个线程之间进行同步操作，按顺序排队的方式进行，使用synchronized关键字即可</p><h2 id="Thread类中的方法"><a href="#Thread类中的方法" class="headerlink" title="Thread类中的方法"></a>Thread类中的方法</h2><h3 id="currentThread"><a href="#currentThread" class="headerlink" title="currentThread()"></a>currentThread()</h3><p>作用：返回代码段正在被哪个线程执行</p><h3 id="isAlive"><a href="#isAlive" class="headerlink" title="isAlive()"></a>isAlive()</h3><p>作用：测试线程是否处于活动状态(线程已经启动尚未终止的状态)</p><p>如果该线程处于活动状态，则返回 true；否则返回 false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制台输出如下</span></span><br><span class="line"><span class="comment"> * false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 就像自杀一样, 你能看到自己已经死了的样子吗?, 所以这里是false</span></span><br><span class="line">        System.out.println(Thread.currentThread().isAlive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制台输出如下</span></span><br><span class="line"><span class="comment"> * false</span></span><br><span class="line"><span class="comment"> * Thread-0在run()中的存活状态: true</span></span><br><span class="line"><span class="comment"> * false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        System.out.println(t1.isAlive()); <span class="comment">// 还没启动,所以是false</span></span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>); <span class="comment">// 确保线程t1已经执行完了</span></span><br><span class="line">        System.out.println(t1.isAlive()); <span class="comment">// 已经终止, 所以是false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;在run()中的存活状态: &quot;</span> + Thread.currentThread().isAlive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：这个<code>isAlive()</code>就像人的一生一样，还没出生之前isAlive肯定是false，已经死亡了isAlive肯定也是false，只有出生了并且还没有死亡isAlive才是true</p><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h3><p>作用：让当前线程进行休眠指定时长</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制台输出如下</span></span><br><span class="line"><span class="comment"> * main: start</span></span><br><span class="line"><span class="comment"> * main: start</span></span><br><span class="line"><span class="comment"> * Thread-0: start</span></span><br><span class="line"><span class="comment"> * Thread-0: end</span></span><br><span class="line"><span class="comment"> * 注: 因为main线程和t1线程是异步执行的, 所以main线程不会等t1执行完再去执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: start&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: start&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: start&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>); <span class="comment">// t1线程休眠了2s</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: end&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getId"><a href="#getId" class="headerlink" title="getId()"></a>getId()</h3><p>public long getId()</p><p>作用：得到线程的唯一标识</p><h3 id="线程堆栈方法"><a href="#线程堆栈方法" class="headerlink" title="线程堆栈方法"></a>线程堆栈方法</h3><ul><li>public StackTraceElement[] getStackTrace()</li></ul><p>作用：返回一个表示该线程堆栈转储的堆栈跟踪元素数组。如果该线程尚未启动或已经终止，则该方法将返回一个零长度数组。如果返回的数组不是零长度的，则其第一个元素代表堆栈顶，它是该序列中最新的方法调用。最后一个元素代表堆栈底，是该序列中最旧的方法调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.a();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">        b();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        c();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();</span><br><span class="line">        <span class="keyword">for</span>(StackTraceElement ele: stackTraceElements)&#123;</span><br><span class="line">            <span class="comment">// 输出类所在的文件名, 类名, 方法名, 行号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;fileName: &quot;</span> + ele.getFileName() + <span class="string">&quot; className:&quot;</span> + ele.getClassName() + <span class="string">&quot; methodName:&quot;</span> + ele.getMethodName() + <span class="string">&quot; lineNumber: &quot;</span>+ ele.getLineNumber());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/24/qwK8AviRVrW69Hh.png" alt="image-20211124104236960"></p><ul><li> public <code>static</code> void dumpStack()</li></ul><p>作用：将当前线程的堆栈跟踪打印至标准错误流。该方法仅用于调试。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.a();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">        b();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        c();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//int i = 1 / 0;</span></span><br><span class="line">        Thread.dumpStack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/24/cnA9gi73KMuCQeT.png"></p><ul><li>public static Map&lt;Thread,StackTraceElement[]&gt; getAllStackTraces()</li></ul><p>作用：返回所有活动线程的堆栈跟踪的一个映射。映射键是线程，而每个映射值都是一个 StackTraceElement 数组，该数组表示相应 Thread 的堆栈转储。</p><h3 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h3><h4 id="判断线程是否为停止状态"><a href="#判断线程是否为停止状态" class="headerlink" title="判断线程是否为停止状态"></a>判断线程是否为停止状态</h4><p>1、static boolean interrupted()：测试currentThread()返回的线程是否已经中断</p><p>作用：测试当前线程是否已经中断。线程的中断状态由该方法清除。换句话说，如果连续两次调用该方法，则第二次调用将返回 false（在第一次调用已清除了其中断状态之后，且第二次调用检验完中断状态前，当前线程再次中断的情况除外）。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.currentThread().interrupt(); <span class="comment">// 中断main线程</span></span><br><span class="line">        System.out.println(<span class="string">&quot;interrupted: &quot;</span> + Thread.interrupted()); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;interrupted: &quot;</span> + Thread.interrupted()); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、boolean <code>is</code>Interrupted()：测试this关键字所在类的对象是否已经中断</p><p>作用：测试线程是否已经中断。线程的中断状态不受该方法的影响。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.currentThread().interrupt(); <span class="comment">// 中断main线程</span></span><br><span class="line">        System.out.println(<span class="string">&quot;interrupted: &quot;</span> + Thread.currentThread().isInterrupted()); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;interrupted: &quot;</span> + Thread.currentThread().isInterrupted()); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单纯使用interrupt-不会让线程中断"><a href="#单纯使用interrupt-不会让线程中断" class="headerlink" title="单纯使用interrupt()不会让线程中断"></a>单纯使用interrupt()不会让线程中断</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制台输出如下</span></span><br><span class="line"><span class="comment"> * 还是会输出到Thread-0:50000</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t1.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;main end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">50000</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1000</span>)&#123;</span><br><span class="line">                Thread.currentThread().interrupt(); <span class="comment">// 中断t1线程</span></span><br><span class="line">                System.out.println(<span class="string">&quot;测试当前线程是否中断: &quot;</span>+Thread.interrupted()); <span class="comment">// true</span></span><br><span class="line">                System.out.println(<span class="string">&quot;测试线程是否中断(this关键字所在类的对象是否已经中断): &quot;</span>+<span class="keyword">this</span>.isInterrupted()); <span class="comment">// false</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式一：使用Stop-强行终止-弃用"><a href="#方式一：使用Stop-强行终止-弃用" class="headerlink" title="方式一：使用Stop()强行终止(弃用)"></a>方式一：使用Stop()强行终止(弃用)</h4><p>会出现各种问题，暂时不去考虑</p><h4 id="方式二：使用interrupt-方法-异常停止线程-建议"><a href="#方式二：使用interrupt-方法-异常停止线程-建议" class="headerlink" title="方式二：使用interrupt()方法+异常停止线程(建议)"></a>方式二：使用interrupt()方法+异常停止线程(建议)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制台输出如下:</span></span><br><span class="line"><span class="comment"> * ........: xxxx</span></span><br><span class="line"><span class="comment"> * Thread-0: 9998</span></span><br><span class="line"><span class="comment"> * Thread-0: 9999</span></span><br><span class="line"><span class="comment"> * 已经是停止状态了, 要退出了</span></span><br><span class="line"><span class="comment"> * MyThread类run()中的catch</span></span><br><span class="line"><span class="comment"> * java.lang.InterruptedException</span></span><br><span class="line"><span class="comment"> *         at com.example.thread.MyThread.run(Test.java:28)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">50000</span> ; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span>(i == <span class="number">10000</span>)&#123;</span><br><span class="line">                   Thread.currentThread().interrupt();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span>(<span class="keyword">this</span>.isInterrupted())&#123;</span><br><span class="line">                   System.out.println(<span class="string">&quot;已经是停止状态了, 要退出了&quot;</span>);</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> +i);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;run end...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyThread类run()中的catch&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式三：使用interrupt-方法-sleep-停止线程"><a href="#方式三：使用interrupt-方法-sleep-停止线程" class="headerlink" title="方式三：使用interrupt()方法+sleep()停止线程"></a>方式三：使用interrupt()方法+sleep()停止线程</h4><ul><li>当线程在sleep()的时候被interrupt()的情况</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制台输出如下:</span></span><br><span class="line"><span class="comment"> * Thread-0: 准备睡觉了</span></span><br><span class="line"><span class="comment"> * MyThread类run()中的catch</span></span><br><span class="line"><span class="comment"> * java.lang.InterruptedException: sleep interrupted</span></span><br><span class="line"><span class="comment"> *         at java.lang.Thread.sleep(Native Method)</span></span><br><span class="line"><span class="comment"> *         at com.example.thread.MyThread.run(Test.java:31)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">500</span>); <span class="comment">// 让主线程休眠500ms, 让t1线程执行到sleep方法</span></span><br><span class="line">        t1.interrupt(); <span class="comment">// 然后中断t1线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: 准备睡觉了&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: 准备起床了&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyThread类run()中的catch&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当为启动了的线程调用interrupt()，然后再调用sleep()也会出现异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制台输出如下:</span></span><br><span class="line"><span class="comment"> * .....</span></span><br><span class="line"><span class="comment"> * 49999</span></span><br><span class="line"><span class="comment"> * 50000</span></span><br><span class="line"><span class="comment"> * Thread-0: 准备睡觉了</span></span><br><span class="line"><span class="comment"> * MyThread类run()中的catch</span></span><br><span class="line"><span class="comment"> * java.lang.InterruptedException: sleep interrupted</span></span><br><span class="line"><span class="comment"> *         at java.lang.Thread.sleep(Native Method)</span></span><br><span class="line"><span class="comment"> *         at com.example.thread.MyThread.run(Test.java:27)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t1.start();</span><br><span class="line">        t1.interrupt(); <span class="comment">// 注意一定是线程启动后被打断(如果将这一行移到上一行就不会出现这种情况)，然后再休眠会出现异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">50000</span>; i++) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: 准备睡觉了&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: 准备起床了&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyThread类run()中的catch&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式四：使用interrupt-方法-return停止线程"><a href="#方式四：使用interrupt-方法-return停止线程" class="headerlink" title="方式四：使用interrupt()方法+return停止线程"></a>方式四：使用interrupt()方法+return停止线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制台输出如下:</span></span><br><span class="line"><span class="comment"> * run start...</span></span><br><span class="line"><span class="comment"> * 停止了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">200</span>); <span class="comment">// 让t1线程先执行, 防止主线程执行了t1.interrupt(),让t1线程还没启动就中断了, 就看不出效果!!!</span></span><br><span class="line">        t1.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run start...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.isInterrupted())&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;停止了&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyThread类run()中的catch&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;run end...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="暂停线程"><a href="#暂停线程" class="headerlink" title="暂停线程"></a>暂停线程</h3><p>暂停线程意味着此线程还可以恢复运行可以使用suspend()暂停、使用resume()恢复但是这两个方法被标识为过期了</p><p>想要实现对线程进行暂停与恢复的效果，可以使用wait()、notify()或者notifyAll()</p><h4 id="suspend"><a href="#suspend" class="headerlink" title="suspend()"></a>suspend()</h4><h4 id="resume"><a href="#resume" class="headerlink" title="resume()"></a>resume()</h4><h3 id="yield"><a href="#yield" class="headerlink" title="yield()"></a>yield()</h3><p>作用：放弃当前的CPU资源，让其他任务去占用CPU执行时间，放弃的时间不确定，有可能刚刚放弃，又马上获得了CPU时间片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制台输出如下:</span></span><br><span class="line"><span class="comment"> * 不注释yield() ==&gt; 用时: 15毫秒</span></span><br><span class="line"><span class="comment"> * 注释yield() ==&gt; 用时: 4319毫秒</span></span><br><span class="line"><span class="comment"> * 停止了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">50000000</span> ; i++) &#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;用时: &quot;</span> + (end - start) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><p>线程的优先级分为10个等级，高优先级的线程可以获取更多的CPU时间片，但这不代表高优先级的线程执行任务时<code>每次</code>都先执行完</p><p>因为线程还具有<code>随机性</code>, 所以只能说概率高一点</p><h4 id="线程优先级的继承特性"><a href="#线程优先级的继承特性" class="headerlink" title="线程优先级的继承特性"></a>线程优先级的继承特性</h4><p>例如：mian线程启动t1线程，那么t1线程的优先级默认和main线程一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制台输出如下:</span></span><br><span class="line"><span class="comment"> * main线程的默认级别: 5</span></span><br><span class="line"><span class="comment"> * Thread-0: 1</span></span><br><span class="line"><span class="comment"> * 注: 因为main线程后面改成1了, 所以t1默认的级别也是1, 但是t1后面是可以自己更改优先级</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main线程的默认级别: &quot;</span> + Thread.currentThread().getPriority());</span><br><span class="line">        Thread.currentThread().setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + Thread.currentThread().getPriority());</span><br><span class="line">        <span class="comment">//Thread.currentThread().setPriority(Thread.MAX_PRIORITY);</span></span><br><span class="line">        <span class="comment">//System.out.println(Thread.currentThread().getName() + &quot;: &quot; + Thread.currentThread().getPriority());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优先级的规律性和随机性"><a href="#优先级的规律性和随机性" class="headerlink" title="优先级的规律性和随机性"></a>优先级的规律性和随机性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制台输出如下:</span></span><br><span class="line"><span class="comment"> * 测试了很多次, 不是耗时长短, 大概率上都是优先级高的线程先执行(也存在低优先级线程先执行的情况)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            ThreadB threadB = <span class="keyword">new</span> ThreadB();</span><br><span class="line">            threadB.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">            threadB.start();</span><br><span class="line"></span><br><span class="line">            ThreadA threadA = <span class="keyword">new</span> ThreadA();</span><br><span class="line">            threadA.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">            threadA.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 耗时操作</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000000</span>; i++) &#123;</span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            random.nextInt();</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;♠♠♠♠threadA use time: &quot;</span> + (end - start) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 耗时操作</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000000</span>; i++) &#123;</span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            random.nextInt();</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;♥♥♥♥threadB use time: &quot;</span> + (end - start) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>Java中有两种线程：一种用户线程(非守护线程)，另一种是守护线程，当进程中没有用户线程了，那么守护线程会自动销毁</p><p>例子：坦克大战、GC(垃圾回收器)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制台输出如下:</span></span><br><span class="line"><span class="comment"> * ...............</span></span><br><span class="line"><span class="comment"> * 小兵: 保护Boss啊</span></span><br><span class="line"><span class="comment"> * 小兵: 保护Boss啊</span></span><br><span class="line"><span class="comment"> * Boss: 我爆炸了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t1.setDaemon(<span class="keyword">true</span>); <span class="comment">// 设置t1线程为守护线程</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Boss: 我爆炸了&quot;</span>);</span><br><span class="line">        <span class="comment">// System.out.println(t1.isAlive()); // true, 因为main线程(用户线程)并还没销毁, 上面的话只是提示而已</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小兵: 保护Boss啊&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 多线程篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式版本控制工具-GIT</title>
      <link href="/2021/11/23/%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7-GIT/"/>
      <url>/2021/11/23/%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7-GIT/</url>
      
        <content type="html"><![CDATA[<h3 id="学习GIT的建议"><a href="#学习GIT的建议" class="headerlink" title="学习GIT的建议"></a>学习GIT的建议</h3><p>先学会GIT命令行，再用图形化界面。</p><p>因为只要你会命令，不管图形化的界面工具怎么变，你都很容易上手。</p><p>如果你一上来就使用图形化界面，会导致你对Git 命令的细节不是很清楚，因为图形化界面有的操作帮你封装了，</p><p>并且有很多GIT命令其实图形化界面也是没有提供的，到时候出了什么问题就一脸懵逼。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、撤销操作 </span><br><span class="line">git commit amend</span><br><span class="line">是完全用一个 新的提交 替换旧的提交</span><br><span class="line">场景：</span><br><span class="line">有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。</span><br><span class="line"></span><br><span class="line">2、取消暂存的文件</span><br><span class="line">A文件在暂存区</span><br><span class="line">让他变为非暂存区：git reset HEAD A</span><br><span class="line"></span><br><span class="line">3、撤销对文件的修改</span><br><span class="line">git checkout -- 文件名</span><br></pre></td></tr></table></figure><h3 id="GIT常用命令"><a href="#GIT常用命令" class="headerlink" title="GIT常用命令"></a>GIT常用命令</h3><h4 id="一、文件状态命令"><a href="#一、文件状态命令" class="headerlink" title="一、文件状态命令"></a>一、文件状态命令</h4><p><img src="https://i.loli.net/2021/11/21/2WDFBLGKpsNf54y.png" alt="image-20211121232203480"></p><p>Git中就两种类型的文件：未跟踪，已跟踪的文件</p><ul><li><p>未跟踪</p><ul><li>红褐色：未被git跟踪的文件</li></ul></li><li><p>已跟踪</p><ul><li>绿色：添加到了暂存区中的文件（已跟踪并放入到了暂存区）</li><li>黑色：提交到了远程仓库（已跟踪但未修改）</li><li>蓝色：修改了文件中的内容(前提：文件之前已经提交到了远程仓库)（已跟踪已修改）</li></ul></li></ul><p><strong>注</strong>：颜色以你的idea主题为主，我这里选的是白色主题讲的</p><ul><li><code>git add</code></li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add多功能命令</span><br><span class="line">1、可以用它开始跟踪新文件</span><br><span class="line">2、或者把已跟踪的文件放到暂存区</span><br><span class="line">3、还能用于合并时把有冲突的文件标记为已解决状态</span><br></pre></td></tr></table></figure><ul><li><code>git commit</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">git commit -am <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，而不是那种你本来是已跟踪暂存文件，然后修改完之后，你还没git add下，否则git commit -m <span class="string">&#x27;xxx&#x27;</span>的是没用修改暂存区内容之前的内容</span><br><span class="line"></span><br><span class="line">原来idea中的提交是：git commit -am <span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>git status</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">暂存区：changes to be commited</span><br><span class="line">非暂存区：changes not staged <span class="keyword">for</span> commit（已跟踪已修改）</span><br><span class="line">未跟踪文件：Untracked files</span><br><span class="line"></span><br><span class="line">运行了git add之后又作了修订的文件，需要重新运行 git add 把最新版本重新暂存起来,</span><br><span class="line">否则(git commit -m <span class="string">&#x27;xxx&#x27;</span>)提交的内容是之前git add时文件的内容。</span><br><span class="line"></span><br><span class="line">文件同时出现在暂存区和非暂存区, 说明某给个在暂存区的文件,你修改内容后,没用继续添加到暂存区</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/21/9BlmJVz7n82va4h.png" alt="image-20211121232232267"></p><p>注：<a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%AE%B0%E5%BD%95%E6%AF%8F%E6%AC%A1%E6%9B%B4%E6%96%B0%E5%88%B0%E4%BB%93%E5%BA%93">参考Git官网</a></p><ul><li><code>git diff</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内。</span></span><br><span class="line">git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若要查看已暂存的将要添加到下次提交里的内容, 等价于git diff --cached</span></span><br><span class="line">git diff --staged</span><br></pre></td></tr></table></figure><h4 id="二、查看提交历史命令"><a href="#二、查看提交历史命令" class="headerlink" title="二、查看提交历史命令"></a>二、查看提交历史命令</h4><ul><li><code>git log</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SHA-1校验和(idea中的Revision Number)</span><br><span class="line">长一点的称为完整<span class="built_in">hash</span>值</span><br><span class="line">短一点的称为简写<span class="built_in">hash</span>值</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志格式按一行显示，只显示两行</span></span><br><span class="line">git <span class="built_in">log</span> --oneline -2</span><br><span class="line"></span><br><span class="line"><span class="comment"># format可以定制记录的显示格式, h: 提交的简写哈希值, s: 提交说明</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">&quot;%h %s&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ASCII字符串来形象地展示你的分支、合并历史</span></span><br><span class="line">git <span class="built_in">log</span> --oneline --graph --all</span><br><span class="line"></span><br><span class="line">注: 按q退出</span><br></pre></td></tr></table></figure><h4 id="三、分支命令"><a href="#三、分支命令" class="headerlink" title="三、分支命令"></a>三、分支命令</h4><h5 id="分支的基本知识"><a href="#分支的基本知识" class="headerlink" title="分支的基本知识"></a>分支的基本知识</h5><p>在做一些新特性或者修复 bug 的时候，我们通常会建立一个新的分支，而完成后我们需要做一个合并分支的操作</p><h5 id="HEAD指针"><a href="#HEAD指针" class="headerlink" title="HEAD指针"></a>HEAD指针</h5><p><img src="https://i.loli.net/2021/11/21/e1RZvMpKBAu25hc.png" alt="image-20211121232259311"></p><p>一般来说，你当前处于哪个分支，HEAD指针也就指向哪个分支，HEAD 总是指向当前分支上最近一次提交记录</p><p>比如有两个分支：A, B</p><p>假设当前是在A分支上：HEAD —&gt; A分支 —&gt; 该分支最新的提交对象(hash值)</p><p>然后切换到B分支上：HEAD—&gt; B分支 —&gt; 该分支最新的提交对象(hash值)</p><p>注：其实只有一个HEAD指针，HEAD切换下指针就行了</p><p><img src="https://i.loli.net/2021/11/21/Iq4H3eLNoV7wPud.png" alt="image-20211121232327971"></p><h5 id="detached-HEAD（分离的HEAD）"><a href="#detached-HEAD（分离的HEAD）" class="headerlink" title="detached HEAD（分离的HEAD）"></a>detached HEAD（分离的HEAD）</h5><p>概念：HEAD指针通常情况下是指向分支名的，但是有时候也会指向某个具体的提交记录(hash值)而不是分支名，这就会导致分离HEAD，可以使用<code>cat .git/HEAD</code>查看HEAD的指向</p><p>应用场景：<strong>TODO</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 产生分离的HEAD的命令</span></span><br><span class="line"><span class="comment"># 相对：可以把分支作为参照物</span></span><br><span class="line">git checkout 分支^ 或者 git checkout 分支~1</span><br><span class="line"><span class="comment"># 相对：也可以把HEAD作为参照物</span></span><br><span class="line">git checkout HEAD^ 或者 git checkout HEAD~1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绝对</span></span><br><span class="line">git checkout 修订号(<span class="built_in">hash</span>值)</span><br><span class="line"></span><br><span class="line">注：通过指定提交记录哈希值的方式(绝对引用)在Git中移动不太方便，所以 Git 引入了相对引用，所以请尽量使用相对引用</span><br><span class="line"></span><br><span class="line">注：分离HEAD如何不分离, 分离的原因是HEAD指针指向了某个记录的<span class="built_in">hash</span>值, 你重新让HEAD指向分支就好了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">强制修改分支位置</span><br><span class="line">我使用相对引用最多的就是移动分支。</span><br><span class="line">可以直接使用 -f 选项让分支指向另一个提交,就不用先切换分支，再向前移动了例如:</span><br><span class="line">1、相对引用</span><br><span class="line">git branch -f main HEAD~3</span><br><span class="line">git branch -f main 分支名~3</span><br><span class="line"></span><br><span class="line">2、绝对引用</span><br><span class="line">git branch -f main 某个提交的<span class="built_in">hash</span>值</span><br><span class="line"></span><br><span class="line">注:上面相对引用和绝对引用的命令都会将main分支强制指向 HEAD 的第 3 级父提交。</span><br></pre></td></tr></table></figure><p>切换到远程分支存在于本地的<code>副本</code></p><p><img src="https://i.loli.net/2021/11/21/LbPFgwqQVmeudlX.png" alt="image-20211121232400414"></p><p><img src="https://i.loli.net/2021/11/21/5RwFMSEsh1Jj4xl.png" alt="image-20211121232422895"></p><h5 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分支, 不会切换</span></span><br><span class="line">git branch 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换到该分支</span></span><br><span class="line">git checkout -b 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在某个分支的提交对象上创建分支</span></span><br><span class="line">git branch 分支名 提交对象<span class="built_in">hash</span>值</span><br></pre></td></tr></table></figure><ul><li>如果直接创建分支的，是基于当前分支<strong>当时</strong>的最新提交对象。</li></ul><p><img src="https://i.loli.net/2021/11/21/mQKWOdJHZgk6ujV.png" alt="image-20211121232522437"></p><ul><li>基于当前分支的某个hash值去创建分支</li></ul><p><img src="https://i.loli.net/2021/11/21/7wKHEjyZQbqk9cB.png" alt="image-20211121232555253"></p><p>注：文件的修订号(Revision Number)也可以称为提交对象的完整hash值或者SHA-1校验和</p><h5 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除(推荐), 如果分支还没合并，会提醒下你</span></span><br><span class="line">git branch -d 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除, idea中删除分支就是这种</span></span><br><span class="line">git branch -D 分支名</span><br><span class="line"></span><br><span class="line">注：如果处于A分支上，就不能删除A分支，需要切换到其他分支上然后删除A分支。</span><br></pre></td></tr></table></figure><h5 id="查询分支"><a href="#查询分支" class="headerlink" title="查询分支"></a>查询分支</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有分支</span></span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h5 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到A分支, 一般来说切换到哪个分支, HEAD指针就会指向哪个分支</span></span><br><span class="line">git checkout A</span><br><span class="line"></span><br><span class="line">注：切换分支最好保持工作区、暂存区干净可以使用stash来避免</span><br><span class="line">切换分支之前: 如果工作目录和暂存区中还有东西, 先使用git stash压栈</span><br><span class="line">切换分支: git checkout 分支名 </span><br><span class="line">等切回来的时候:再把git stash pop弹栈</span><br></pre></td></tr></table></figure><h5 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git merge 目标分支</span><br><span class="line">把目标分支合并到当前分支上</span><br><span class="line">注：merge：目标分支 --&gt; 当前分支 </span><br><span class="line"></span><br><span class="line">git rebase 目标分支</span><br><span class="line">当前分支的一个副本要跑到目标分支上去</span><br><span class="line">注：rebase：当前分支副本 --&gt; 目标分支</span><br></pre></td></tr></table></figure><ul><li><code>git merge</code></li></ul><p>演示效果如下：</p><p><img src="https://i.loli.net/2021/11/21/HbXhJfxyC6riOcE.png" alt="image-20211121232627999"></p><p><img src="https://i.loli.net/2021/11/21/fgKjSJ5LueF3oAV.png" alt="image-20211121232718378"></p><p>注：在本地将specimal_branch的内容<code>merge</code>到master分支中，在本地切换到master分支，这时也可以看到之前</p><p>specimal_branch加的内容了。但远程分支上还没有，需要切换到master分支，然后push到远程库</p><ul><li><p><code>git rebase</code></p></li><li><p><code>git merge 和 git rebase的总结与区别</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">总结</span><br><span class="line">比喻: 就像B要给A还钱一样</span><br><span class="line">方式一：A在家里打电话叫B送钱过来(被动)</span><br><span class="line">方式二：B从家里主动送钱到A家里(主动)</span><br><span class="line"></span><br><span class="line">区别:</span><br><span class="line">两者还是有很大区别的, 只是说它俩都能完成合并的这种功能</span><br><span class="line">git merge: 优点是分支代码合并后不破坏原分支的代码提交记录,缺点就是会产生额外的提交记录并进行两条分支的合并，</span><br><span class="line">git rebase: 会获得更清晰的项目历史记录</span><br></pre></td></tr></table></figure><p>注：<a href="https://joyohub.com/2020/04/06/git-rebase/">merge与rebase之间的区别</a></p><h5 id="查看合并分支的小技巧"><a href="#查看合并分支的小技巧" class="headerlink" title="查看合并分支的小技巧"></a>查看合并分支的小技巧</h5><ul><li>一、选中两个提交对象进行比较</li></ul><p><img src="https://i.loli.net/2021/11/21/6oaRFnpOELueYVH.png" alt="image-20211121232737274"></p><p>已经合并到当前分支：git branch –merged</p><p>尚未合并到当前分支：git branch –no-merged</p><p>A、B两个分支</p><p>1、在A分支下执行：git branch –merged，出现了B</p><p>说明B分支合并到了A分支，说明A包含了B</p><p>2、在B分支下执行：git branch –merged，啥也没出现</p><p>说明B没有包含A</p><ul><li>二、右击：go to child/parent commit</li></ul><p><img src="https://i.loli.net/2021/11/21/ApJn6smSwNf38jO.png" alt="image-20211121232758856"></p><ul><li>三、分支的收缩和展开</li></ul><p><img src="https://i.loli.net/2021/11/21/SFkKf2cUidtjQNV.png" alt="image-20211121232822224"></p><ul><li>四、hash值其实就是idea中的修订号前面一部分</li></ul><p><img src="https://i.loli.net/2021/11/21/QVqdSvZaztAWuxI.png" alt="image-20211121232845266"></p><ul><li>五、查看本地分支与远程分支副本的情况</li></ul><p><img src="https://i.loli.net/2021/11/21/om9xv5FB8WQT3sA.png" alt="image-20211121232905782"></p><ul><li>六 </li></ul><p><img src="https://i.loli.net/2021/11/21/VxQBo7AMhbpngra.png" alt="image-20211121232928398"></p><h5 id="分支中遇到的问题"><a href="#分支中遇到的问题" class="headerlink" title="分支中遇到的问题"></a>分支中遇到的问题</h5><p>1、版本不一致</p><p>如果远程master分支存在于本地的一份副本 和 远程分支的版本记录不一致时<br>这时push的话，会出现弹框，点击Merge：它其实是先fetch完，然后再让你手动merge(合并)</p><p><img src="https://i.loli.net/2021/11/21/S51hq8ICo9JwDen.png" alt="image-20211121232957598"></p><p>2、</p><p><img src="https://i.loli.net/2021/11/21/vhpjYJNPs27OXgm.png" alt="image-20211121233017657"></p><p><img src="https://i.loli.net/2021/11/21/z2VaPoyb6Qiklpu.png" alt="image-20211121233049533"></p><p>注：切换分支前，如果工作目录和暂存区中还有东西，那么先使用git stash压栈，然后</p><p>切换分支(git checkout 分支名) ，等切回来的时候，再把git stash pop弹栈</p><h4 id="四、撤销命令"><a href="#四、撤销命令" class="headerlink" title="四、撤销命令"></a>四、撤销命令</h4><h5 id="reset命令"><a href="#reset命令" class="headerlink" title="reset命令"></a>reset命令</h5><p>git reset 向上移动分支，原来指向的提交记录就跟从来没有提交过一样，只对提交到本地仓库时的提交对象有效对远程分支无效！！！</p><p>其实reset在这里的意思更像前往的意思，并不是真的删除</p><p><img src="https://i.loli.net/2021/11/22/wEWAK7zquLQhjn4.png" alt="image-20211122103342382"></p><p>1、reset命令的类型/模式/参数</p><ul><li><code>soft</code>：工作目录和暂存区的文件都不会丢弃</li><li><code>mixed(默认)</code>：工作目录的文件不会动，只有丢弃暂存区的文件</li><li><code>hard</code>：工作目录和暂存区的文件都要丢弃</li></ul><p>2、撤销的定位</p><ul><li><p><code>相对定位</code></p><ul><li>git reset master^</li><li>git reset master~1</li></ul><p>注：相对master分支前一次(也就是找master的父节点)，^和~1都代表上一次</p></li><li><p><code>绝对定位</code></p><ul><li>git reset hash值(修订号)</li></ul><p>注：直接回退到指定版本号，像提交到本地仓库你向前之前log就不见了，怎么回去呢？</p><p>使用<code>git reflog</code> 相当于linux中的<code>history</code>命令，可以记录你的一些操作，然后使用git reset hash重新回去即可。</p></li></ul><p><img src="https://i.loli.net/2021/11/22/5Rq9Bc4Gl1vLhQo.png" alt="image-20211122103403612"></p><p>注：回到过去，第四列是对于新创建的文件。</p><p><strong>IDEA中的信息提示</strong></p><p><img src="https://i.loli.net/2021/11/22/TWeUpqHPtrLXjMg.png" alt="image-20211122103801592"></p><p><strong>reset的mixed类型(默认)</strong></p><p><img src="https://i.loli.net/2021/11/22/mJCPSc23a4qkW8p.png" alt="image-20211122103844584"></p><p>注：执行完git命令(以它为主)，idea有时候会反应不过来，需要稍等一下或者点一下对应的地方。</p><p><strong>reset的hard类型</strong></p><p><img src="https://i.loli.net/2021/11/22/Tcx8rvd3BZ4zuIa.png" alt="image-20211122103904776"></p><h5 id="revert命令"><a href="#revert命令" class="headerlink" title="revert命令"></a>revert命令</h5><p><img src="https://i.loli.net/2021/11/22/q5EFKsj3fUdaPtm.png" alt="image-20211122103930117"></p><p><img src="https://i.loli.net/2021/11/22/aVOy29xlBHI6Tvt.png" alt="image-20211122103951669"></p><h4 id="五、远程相关命令"><a href="#五、远程相关命令" class="headerlink" title="五、远程相关命令"></a>五、远程相关命令</h4><h5 id="fetch命令"><a href="#fetch命令" class="headerlink" title="fetch命令"></a>fetch命令</h5><p><img src="https://i.loli.net/2021/11/23/AYTgmuUZRIx3Bha.png" alt="image-20211122104959059"></p><p>从远程仓库获取数据 git fetch<br>1、从远程仓库下载本地仓库中缺失的提交记录<br>2、更新远程分支副本指针(如 o/main)<br>注：<code>git fetch</code>实际上将本地仓库中的远程分支副本更新成了远程仓库相应分支最新的状态。<br>注：<code>git fetch</code> 并不会改变你本地仓库的状态。它不会更新你的 <code>main</code> 分支，也不会修改你磁盘上的文件。</p><h5 id="pull命令"><a href="#pull命令" class="headerlink" title="pull命令"></a>pull命令</h5><p>pull = fetch + merge<br>fetch一定会产生分支吗? 不一定<br>merge一定要解决合并冲突吗? 不一定</p><p>你可能经过三种pull的情况<br>①pull: 不会产生分支, 也不需要解决合并冲突(当然没有分支当然不用合并, 不用合并哪来的合并冲突)<br>②pull: 产生了分支, 但合并的时候不需要解决合并冲突<br>③pull: 产生了分支, 并且合并的时候需要解决合并冲突</p><p>注：①中的merge类型是<code>fast-forward merge</code>不会产生一个新的commit，②和③的merge类型是<code>three-way merge</code>由于合并后会产生一个新的提交</p><hr><p>pull: 不会产生分支<br>本地远程分支副本 和 远程分支保持一致<br>本地分支没有commit，本地远程分支副本 和 远程分支保持不一致</p><p>pull: 产生了分支, 但合并的时候不需要解决合并冲突<br>本地远程分支副本 和 远程分支没有保持一致, 并且本地分支进行commit了<br>两个分支合并的时候, 修改的文件不是同一个, 则合并的时候不需要解决合并冲突<br>注：GIT练习网站的模拟团队合作跟这个一模一样</p><p>pull: 产生了分支, 并且合并的时候需要解决合并冲突<br>本地远程分支副本 和 远程分支没有保持一致, 并且本地分支进行commit了<br>两个分支合并的时候, 修改的文件是同一个, 则合并的时候需要解决合并冲突</p><h5 id="push命令"><a href="#push命令" class="headerlink" title="push命令"></a>push命令</h5><p><code>git push</code> 负责将你的变更上传到指定的远程仓库，并在远程仓库上合并你的新提交记录。</p><p><img src="https://i.loli.net/2021/11/23/on73b4ZPk2IV9LH.png" alt="image-20211122105022353"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、git clone 远程仓库</span><br><span class="line">2、本地main分支, git commit了一次, 所以main指向的是C2</span><br><span class="line">3、然后push</span><br><span class="line">发生的变化: </span><br><span class="line">①把C2推送到了远程分支</span><br><span class="line">②本地远程分支副本(o/main)，也指向了C2</span><br><span class="line">注: 因为本地分支main是基于远程分支最新的内容上修改的。</span><br></pre></td></tr></table></figure><h5 id="push失败的问题-偏离的提交历史"><a href="#push失败的问题-偏离的提交历史" class="headerlink" title="push失败的问题(偏离的提交历史)"></a>push失败的问题(偏离的提交历史)</h5><p>push之前先pull</p><ul><li><code>git pull</code> = git fetch + git merge</li><li><code>git pull --rebase</code> =  git fetch + git rebase</li></ul><h3 id="GIT常见问题"><a href="#GIT常见问题" class="headerlink" title="GIT常见问题"></a>GIT常见问题</h3><h4 id="网络超时问题"><a href="#网络超时问题" class="headerlink" title="网络超时问题"></a>网络超时问题</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、OpenSSL SSL<span class="built_in">_</span>read: SSL<span class="built_in">_</span>ERROR<span class="built_in">_</span>SYSCALL, errno 10053</span><br><span class="line">或者</span><br><span class="line">2、fatal: unable to access xxx.git Failed to connect to github.com port 443: Timed out</span><br></pre></td></tr></table></figure><p>注：访问github的网络问题，看本地的host文件有没有修改，看代理服务器稳不稳定。</p><p>注：使用镜像克隆的时候把网址中的<code>github.com</code>替换成<code>github.com.cnpmjs.org</code></p><h4 id="GitHub不支持密码认证"><a href="#GitHub不支持密码认证" class="headerlink" title="GitHub不支持密码认证"></a>GitHub不支持密码认证</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br></pre></td></tr></table></figure><h5 id="生成token"><a href="#生成token" class="headerlink" title="生成token"></a>生成token</h5><p><img src="https://i.loli.net/2021/11/23/nhytxcdSq4Wms5Y.png" alt="1636982954834"></p><p><img src="C:\Users\wzj\AppData\Roaming\Typora\typora-user-images\1636983002762.png" alt="1636983002762"></p><h5 id="生成SSH-Key-我是这种方式解决的"><a href="#生成SSH-Key-我是这种方式解决的" class="headerlink" title="生成SSH Key(我是这种方式解决的)"></a>生成SSH Key(我是这种方式解决的)</h5><p><img src="https://i.loli.net/2021/11/23/SoXitLhJGIp8eHy.png" alt="1636983928118"></p><p>生成完SSH Key，然后使用SSH的方式，将项目克隆下来，然后推送本地分支推送到了远程仓库<br>命令：git push 远程库名 本地分支<br>例子：git push origin local_dev </p><p><a href="https://blog.csdn.net/cnds123321/article/details/119707957">生成SSH KEY博客</a></p><h3 id="GIT学习资料"><a href="#GIT学习资料" class="headerlink" title="GIT学习资料"></a>GIT学习资料</h3><p><img src="https://i.loli.net/2021/11/23/VOPg8SYD1dnH6LJ.png" alt="1637392447974"></p><p>文档：<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰 GIT</a>、<a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B">GIT官网文档</a></p><p>练习：<a href="https://learngitbranching.js.org/?locale=zh_CN">GIT动画练习网站</a></p><p>视频：<a href="https://space.bilibili.com/364122352/channel/detail?cid=150242&ctype=0">GIT视频</a></p><p>博客：<a href="https://bluestragglers.com/you-qu-de-git-lian-xi-wang-zhan-fen-xiang/">参考别人的博客进行查看</a>、<a href="https://www.cnblogs.com/Sky-seeker/p/13332222.html">优质博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大帅比的超神之路</title>
      <link href="/2021/11/21/%E5%A4%A7%E5%B8%85%E6%AF%94%E7%9A%84%E8%B6%85%E7%A5%9E%E4%B9%8B%E8%B7%AF/"/>
      <url>/2021/11/21/%E5%A4%A7%E5%B8%85%E6%AF%94%E7%9A%84%E8%B6%85%E7%A5%9E%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><h4 id="0、数据结构与算法"><a href="#0、数据结构与算法" class="headerlink" title="0、数据结构与算法"></a>0、数据结构与算法</h4><p>书籍：<code>漫画算法</code>、<code>算法图解</code>、<code>啊哈算法</code>、<code>数据结构与算法分析(java语言)</code>、<code>大话数据结构</code>、<code>趣学算法</code></p><p>视频：<a href="https://www.bilibili.com/video/BV1JW411i731">浙大数据结构与算法</a>，<a href="https://www.bilibili.com/video/BV1B4411H76f?from=search&seid=6950214731868008837&spm_id_from=333.337.0.0">韩顺平数据结构与算法</a></p><p>练习：<a href="https://leetcode-cn.com/leetbook/?ivk_sa=1024320u">leetbook</a>，算法也有动画的网站、LintCode、LeetCode、LeetCode中文站、牛客网</p><h4 id="0、计算机网络"><a href="#0、计算机网络" class="headerlink" title="0、计算机网络"></a>0、计算机网络</h4><p><a href="https://www.bilibili.com/video/BV1Mh411b7sM?spm_id_from=333.851.b_7265636f6d6d656e64.1">视频</a></p><h4 id="1、JAVASE"><a href="#1、JAVASE" class="headerlink" title="1、JAVASE"></a>1、JAVASE</h4><p>书籍：<code>疯狂java讲义</code>，<code>java编程思想</code>，<code>深入理解Java虚拟机</code></p><h4 id="2、网络"><a href="#2、网络" class="headerlink" title="2、网络"></a>2、网络</h4><p>书籍：<code>图解HTTP</code>、<code>网络是怎样连接的</code>、<code>计算机网络自动向上</code></p><h4 id="3、线程"><a href="#3、线程" class="headerlink" title="3、线程"></a>3、线程</h4><p>入门书籍：<code>图解多线程设计模式</code>、<code>Java多线程编程核心技术(第二版)</code>、<code>Java并发编程之美</code>、<code>Java并发编程的艺术(理论)</code>、<code>实战Java高并发程序设计(使用)</code></p><p>进阶书籍：<code>Java并发编程实践</code></p><p>博客：<a href="http://concurrent.redspider.group/">深入浅出java多线程</a>、<a href="https://hzy38324.gitbooks.io/java-concurrency-in-practice/content/">Java并发编程实践整理的博客</a>、<a href="http://ifeve.com/java-concurrency-thread-directory/">并发编程网</a></p><p>视频：<a href="https://space.bilibili.com/51950540?spm_id_from=333.788.b_765f7570696e666f.1">动画视频</a></p><h4 id="4、设计模式"><a href="#4、设计模式" class="headerlink" title="4、设计模式"></a>4、设计模式</h4><p>书籍：<code>图解设计模式</code></p><h4 id="5、MySQL数据库"><a href="#5、MySQL数据库" class="headerlink" title="5、MySQL数据库"></a>5、MySQL数据库</h4><p>58 sql 军规</p><p>入门书籍：<code>MySQL必知必会</code>，<code>MySQL是怎么样使用的(零蛋小孩子)</code></p><p>进阶书籍：<code>MySQL是怎么运行的</code>，<code>MySQL45讲(丁奇)</code>，<code>MySQL技术内幕</code></p><p>练习：牛客网</p><h4 id="6、Spring"><a href="#6、Spring" class="headerlink" title="6、Spring"></a>6、Spring</h4><h4 id="7、Redis"><a href="#7、Redis" class="headerlink" title="7、Redis"></a>7、Redis</h4><p>redis中文官网</p><h5 id="7-1、Redisson分布式锁"><a href="#7-1、Redisson分布式锁" class="headerlink" title="7.1、Redisson分布式锁"></a>7.1、Redisson分布式锁</h5><p><a href="https://github.com/redisson/redisson">Redisson github中的wiki有中文翻译!!</a></p><h4 id="8、微服务相关（广度）"><a href="#8、微服务相关（广度）" class="headerlink" title="8、微服务相关（广度）"></a>8、微服务相关（广度）</h4><p>书是牛人的经验，需要多读，别人是花了很多时间写出来的</p><p>深度比较重要，广度也要跟上，至少会用。</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><h4 id="Git版本控制工具"><a href="#Git版本控制工具" class="headerlink" title="Git版本控制工具"></a>Git版本控制工具</h4><p><a href="https://juejin.cn/post/6844904201592504334">GIT的一些概念</a></p><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B">Git官网</a></p><p><a href="https://learngitbranching.js.org/?locale=zh_CN">图形化练习GIT的网站</a> </p><p><strong>视频：</strong><a href="https://space.bilibili.com/364122352/channel/detail?cid=150242&ctype=0">Git 视频</a></p><p><a href="https://www.bilibili.com/video/BV1E44y1h7Ne?p=31&spm_id_from=pageDriver">GIT视频</a></p><p><a href="https://space.bilibili.com/33165125/search/video?keyword=Git">GIT视频</a></p><p>jmeter、postman、ApiFox(类似postman产品)、JVM调优工具</p><h4 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h4><h5 id="Idea-Debug"><a href="#Idea-Debug" class="headerlink" title="Idea Debug"></a>Idea Debug</h5><h5 id="Idea-连接数据库"><a href="#Idea-连接数据库" class="headerlink" title="Idea 连接数据库"></a>Idea 连接数据库</h5><h5 id="Idea-RestClient插件"><a href="#Idea-RestClient插件" class="headerlink" title="Idea RestClient插件"></a>Idea RestClient插件</h5><h5 id="Idea-Jrebel插件"><a href="#Idea-Jrebel插件" class="headerlink" title="Idea Jrebel插件"></a>Idea Jrebel插件</h5><h5 id="Idea-Git插件"><a href="#Idea-Git插件" class="headerlink" title="Idea Git插件"></a>Idea Git插件</h5><h4 id="辅助网站工具"><a href="#辅助网站工具" class="headerlink" title="辅助网站工具"></a>辅助网站工具</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命名网站：https://unbug.github.io/codelf/<span class="params">#</span>branch</span><br><span class="line">正则可视化：https://jex.im/regulex/<span class="params">#</span>!flags=<span class="built_in">&amp;</span>re=<span class="comment">%5E(a%7Cb)*%3F%24</span></span><br><span class="line">画图：starUML </span><br></pre></td></tr></table></figure><h3 id="学习方法-思想"><a href="#学习方法-思想" class="headerlink" title="学习方法/思想"></a>学习方法/思想</h3><p><a href="https://www.bilibili.com/video/BV1iK4y1x7g7?from=search&seid=10563555890905490243&spm_id_from=333.337.0.0">如何自学</a></p><p><a href="https://www.bilibili.com/video/BV1zN411o7Xh?from=search&seid=10563555890905490243&spm_id_from=333.337.0.0">费曼学习法</a></p><h3 id="搭建个人博客"><a href="#搭建个人博客" class="headerlink" title="搭建个人博客"></a>搭建个人博客</h3><p><a href="https://www.bilibili.com/video/BV1cv411N7kz?p=2">分析博客优缺点的视频</a></p><p>还是选择Hexo吧，静态博客，不需要搭建服务器。</p><p>Hexo主题：github搜索butterfly</p><p>缺点：就是不能随时写博客，每次修改都得敲命令，如果到别人电脑上还得安装环境配置，后续其实也可以部署到服务器上</p><p><a href="https://mp.weixin.qq.com/s/jVEv9jHV3WS5nAkVOmAcng">步骤</a></p><p><a href="https://butterfly.js.org/posts/dc584b87/">该主题的文档，也很详细</a></p><p><a href="https://blog.imzjw.cn/posts/b74f504f/">参考</a></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">一、</span><br><span class="line">安装git</span><br><span class="line">安装nodeJs</span><br><span class="line">安装hexo</span><br><span class="line">然后下一个主题：放到themes文件夹中，然后修改<span class="built_in">_</span>config.yml中主题的名字为下载的主题的文件夹名</span><br><span class="line">然后依次执行：hexo clean, hexo g, hexo s </span><br><span class="line"></span><br><span class="line">然后在博客根目录创建一个文件<span class="built_in">_</span>config.butterfly.yml, 将butterfly主题中<span class="built_in">_</span>config.yml内容复制过来即可，然后主要是在博客根目录下配置如下两个文件</span><br><span class="line"><span class="built_in">_</span>config.butterfly.yml</span><br><span class="line"><span class="built_in">_</span>config.yml</span><br><span class="line"></span><br><span class="line">推送自己写的md文档比较简单 F:<span class="keyword">\blog</span><span class="keyword">\source</span><span class="keyword">\_</span>posts, 创建md文档即可</span><br><span class="line">也可以在博客根目录输入： hexo new &quot;你的文章名字&quot;， 后面就hexo clean, hexo g, hexo s即可</span><br><span class="line">注：命令每次敲太麻烦了, 有可以解决的. 和本地的图片如何上传上去</span><br><span class="line"></span><br><span class="line">二、远程</span><br><span class="line">跟github关联即可</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意事项: </span><br><span class="line">不要把个人需要的文件/图片放在主题source文件夹里，因为在升级主题的过程中，可能会把文件覆盖删除了。</span><br><span class="line">在Hexo根目录的source文件夹里，创建一个文件夹来放置个人文件/图片。</span><br><span class="line">引用文件直接为/文件夹名称/文件名</span><br></pre></td></tr></table></figure><h4 id="搭建图床"><a href="#搭建图床" class="headerlink" title="搭建图床"></a>搭建图床</h4><p>搭建图床的步骤</p><p>1、在Github上创建一个存放图片的仓库(勾选生成readme文件，会帮你创建分支)，默认分支可能是main而不是master，<br>      生成一个token(给PicGo用)</p><p>2、安装PicGo</p><p>3、设置Typora指向PicGo的路径即可(注意Typora的版本)</p><p>注：<a href="https://juejin.cn/post/6844904137407086600#heading-5">参考博客</a></p><h4 id="部署到Github上"><a href="#部署到Github上" class="headerlink" title="部署到Github上"></a>部署到Github上</h4><p>关联Github仓库</p><p>1、创建一个Github仓库，存放你的Hexo博客，仓库名必须是<code>用户名.github.io</code></p><p>2、在Hexo的_config.yml配置中配置远程仓库的地址，执行<code>hexo d</code>命令上传上去</p><p>3、会出现<code>ERROR Deployer not found: git</code>，输入以下命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>4、执行hexo d命令报错如下<br>Support for password authentication was removed on August 13, 2021. Please use a personal access token instead<br>解决办法：在Hexo配置文件_config.yml中换成把repository换成SSH(其实也就是之前生成SSH key)</p><p>5、访问地址：https://用户名.github.io/</p><p>注：<a href="https://www.jianshu.com/p/330e0ae1ebd7">参考博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 大帅比超神之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
